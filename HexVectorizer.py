
from sklearn.feature_extraction.text import CountVectorizer

import os
import re

# Byte file properties
LINE_LEN = 16
ADDR_LEN = 9


def hex_to_str(hex_line):
    """
    Function to strip \r, \n and remove address
    of length eight character+space from hex line.
    """
    return hex_line.decode().strip()[ADDR_LEN:]


def remove_non_hex(hex_str):
    """
    Function to remove non hex characters.
    """
    # Replace non hex characters with empty string.
    hex_str = re.sub(r"[^0-9A-F\s]+", "", hex_str, flags=re.IGNORECASE)
    # Replace multiple spaces with single space.
    hex_str = re.sub(r"\s+", " ", hex_str)

    return hex_str.strip().lower()


class Vectorizer(CountVectorizer):
    """
    Convert strings to vectors
    """

    def transform_byte_file(self, ts_file):
        """
        Function to convert a byte-file into a data-point/row in CSV file.
        Each data-point will have file-name, file-size & byte-string columns.
        """

        # Open the byte-file for reading.
        with open(ts_file, "rb") as byt_f:
            # Remove memory address in the beginning of each line and concatenate
            # all lines in the byte-file into a single string separated by space.
            byt_str = " ".join([hex_to_str(line) for line in byt_f.readlines()])
            byt_str = remove_non_hex(byt_str)

            # Get the byte-file name.
            f_path, _ = os.path.splitext(byt_f.name)  # Full path, extension.
            _, f_name = f_path.rsplit("/", 1)  # Relative path, file-name.

            # Get the byte-file size.
            file_info = os.stat(byt_f.name)
            f_size = file_info.st_size

            bow = self.transform([byt_str]).toarray()[0].tolist()
            return [f_name, f_size] + bow

    def get_feature_names(self):
        """
        Function to return vocabulary as feature names.
        """
        return self.get_feature_names_out().tolist()
